name: Build and Publish
on:
  pull_request:
    branches: ["main"]
    types: ["opened", "synchronize", "edited", "closed"]
    paths: ['src/**', 'Dockerfile']
env:
  AWS_REGION: "us-east-1"
  ECR_REPO: "repo/name"
  RESULT_ICON: ""

permissions:
  id-token: write
  contents: write
  pull-requests: write

jobs:
  app-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: PaulHatch/semantic-version@v5.4.0
      id: generate-version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        minor_pattern: "(MINOR)"
        version_format: ${major}.${minor}.${patch}

    outputs:
      version_tag: ${{ steps.generate-version.outputs.version_tag }}


  docker-build:
    needs: [app-build]
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ needs.app-build.outputs.version_tag }}
      VULN_SCAN_FILE: "vulnerability_results.txt"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: 'arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/${{ secrets.GH_ACTIONS_ROLE }}'
          aws-region: "${{ env.AWS_REGION }}"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Docker build and tag
        id: docker_buid_and_tag
        run: docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }} .

      - name: Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}'
          format: 'table'
          output: ${{ env.VULN_SCAN_FILE }}
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'

      - name: Read scan vulnerability report
        if: always()
        id: container-vuln-report
        run: |
          sed -i '/^===/d' ${{ env.VULN_SCAN_FILE }}
          sed -i '/^Total/s/^/### /' ${{ env.VULN_SCAN_FILE }}
          sed -i '/^golang/s/^/### /' ${{ env.VULN_SCAN_FILE }}
          echo 'CONT_SCAN_REPORT<<EOF' >> $GITHUB_OUTPUT
          cat ${{ env.VULN_SCAN_FILE }} | head -4 >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          echo 'CONT_SCAN_REPORT_NEW<<EOF' >> $GITHUB_OUTPUT
          cat ${{ env.VULN_SCAN_FILE }} >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Docker push to ECR
        if: github.event.pull_request.merged == true
        id: docker-push
        run: docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}

      - name: Update result icon
        if: always()
        run: if [[ ${{ steps.docker_buid_and_tag.outcome }} == "success" ]] ; then echo "RESULT_ICON=$(echo ✅)" >> $GITHUB_ENV  ; else echo "RESULT_ICON=$(echo ❌)" >> $GITHUB_ENV ; fi

      - name: Comment PR
        uses: marocchino/sticky-pull-request-comment@v2
        # When the previous steps fails, the workflow would stop. By adding this
        # condition you can continue the execution with the populated error message.
        if: always()
        with:
          header: pr-title-lint-error
          message: |
            *@${{ github.actor }}*,

            ### Container build and publish result: *${{ steps.docker_buid_and_tag.outcome }}* ${{ env.RESULT_ICON }}
            Job :link:: ["Job Number ${{ github.run_number }}"](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ### Trivy vulnerability summary:
            ${{ steps.container-vuln-report.outputs.CONT_SCAN_REPORT }}

            <details><summary>Show details</summary>

            ```csv
            ${{ steps.container-vuln-report.outputs.CONT_SCAN_REPORT_NEW }}
            ```

            </details>

      - name: Generate Summary
        if: always()
        run: |
          cat > $GITHUB_STEP_SUMMARY << EOL
          ## Docker build and publish summary! 🚀
          ### Container Image
          Image name: **${{ env.ECR_REPO }}**
          Image tag:  **${{ env.IMAGE_TAG }}**
          ECR: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}

          ### Container Vulnerability Scan
          ${{ steps.container-vuln-report.outputs.CONT_SCAN_REPORT_NEW }}


          ### Container Vulnerability Scan
          <details><summary>Show details</summary>

          \`\`\`\n
          ${{ steps.container-vuln-report.outputs.CONT_SCAN_REPORT_NEW }}
          \`\`\`

          </details>


  release:
    if: github.event.pull_request.merged == true
    needs: [app-build, docker-build]
    runs-on: ubuntu-latest
    env:
      TARGET_TAG: ${{ needs.app-build.outputs.version_tag }}
    steps:
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ env.TARGET_TAG }}" \
              --repo="${GITHUB_REPOSITORY}" \
              --title="${{ env.TARGET_TAG }}" \
              --generate-notes \
              --notes "- Generated Image: **${{ env.ECR_REPO }}:${{ env.TARGET_TAG }}**" \
              || echo "Release already exists, proceeding to edit release notes" \
          gh release edit "${{ env.TARGET_TAG }}" \
              --repo="${GITHUB_REPOSITORY}" \
              --notes "- Generated Image: **${{ env.ECR_REPO }}:${{ env.TARGET_TAG }}**"

      - name: Generate Summary
        if: always()
        run: |
          cat > $GITHUB_STEP_SUMMARY << EOL
          ## Create Release (Only generated when merging a PR to main)
          New Release 🔗: [${{ env.TARGET_TAG }}](${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ env.TARGET_TAG }})
          EOL
